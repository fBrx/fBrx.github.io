<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Recent Content on // Florian Br√ºssel / fBrx </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://fbrx.github.io/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Wed, 20 Jan 2016 19:09:27 &#43;0100</updated>
    
    <item>
      <title>Building your first Docker image</title>
      <link>https://fbrx.github.io/post/build-your-first-docker-image/</link>
      <pubDate>Wed, 20 Jan 2016 19:09:27 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/post/build-your-first-docker-image/</guid>
      <description>

&lt;p&gt;Docker images are the way to distribute preconfigured, rebuildable containers.&lt;/p&gt;

&lt;p&gt;This can for example be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persist the runtime configuration for a project in the SCM system of your choice and&lt;/li&gt;
&lt;li&gt;exchange configurations between team members&lt;/li&gt;
&lt;li&gt;get new team members up and running in minutes instead of days&lt;/li&gt;
&lt;li&gt;aleviate the burden of keeping a running dev environment up to date as long as the software is in production - even if the backlog is empty&lt;/li&gt;
&lt;li&gt;&amp;hellip;and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a docker image you basically have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start a container, customize the environment to your liking and finally package the container as a reusable image&lt;/li&gt;
&lt;li&gt;build an image by means of a Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you plan on reusing and distributing your image it is always recommended to use a Dockerfile to describe the resulting environment. If an image is just packaged from an existing container, there is no easy way for the future user to know what functionality is provided by the image.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Creating a Dockerfile&lt;/h1&gt;

&lt;p&gt;The Dockerfile is the Docker-way of specifiing the characteristics of an image, which can then be used to create a running container. You can think of the Dockerfile as a recipe to automatically build your image.&lt;/p&gt;

&lt;p&gt;The Dockerfile is made up of different commands. There is a comprehensive &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt; provided.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The base image&lt;/h2&gt;

&lt;p&gt;The base image specifies the starting point of your container description. Usually you will not start with an empty container, but extend or customize an existing container (e.g. ubuntu or tomcat). You specifiy the base image with the &lt;code&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; directive. The definition of the base image must be the first non-comment instruction in the Dockerfile.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Commands&lt;/h2&gt;

&lt;p&gt;All of the available commands are documented extensively in the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt; and will not be covered in detail here.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;ENTRYPOINT and CMD&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; directives can be used to create executable containers and specify the command (and arguments) to be run on startup.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ENTRYPOINT&lt;/code&gt; defines the default command (optionally including arguments) which is executed when an image is run via the &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt; command.
The &lt;code&gt;CMD&lt;/code&gt; dirctive is used to specify default arguments to the executable defined in the entrypoint. If any command line arguments are supplied to the &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt; command, they wil replace the values specified in the Dockerfile. This can thus be used to provide a sensible default configuration to easily create and run a container based on your image without loosing the flexibility of customizing the startup command parameters (and minimizing he need to create a seperate Dockerfile just to adjust the command parameters).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; There are different possibilities and combinations for using the two directives, but the scenario described above worked out the best for me.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Creating the image&lt;/h1&gt;

&lt;p&gt;To create the image, you must buils it. This basically means that the instructions in the Dockerfile have to be executed, recorded and persisted in the resulting image with the name of your choice. The image gets build with the &lt;code&gt;docker build&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t &amp;lt;namespace&amp;gt;/&amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt; &amp;lt;base dir&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will execute the Dockerfile and store the resulting image in the local repository. The option after the &lt;code&gt;-t&lt;/code&gt; flag specifies the desired name of your resulting image in the (local) repository. Even though this setting is optional, I would always recommend setting it, since otherwise you will not be able to easily reference your newly built image.
The image names consist of a namespace and a tag name. You can group different images under a namespace. If you use the &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt; your account name will be the namespace for your images.
The tag can be used to provide different versions of an image. If not specified the tag &amp;lsquo;latest&amp;rsquo; will be implied.&lt;/p&gt;

&lt;p&gt;You can check, that your image was built successfully and stored in the local repository by running the &lt;code&gt;docker images&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY     TAG        IMAGE ID         CREATED           VIRTUAL SIZE
fbrx/test      latest     756a1405cd9e     7 minutes ago     237.7 MB
&amp;lt;none&amp;gt;         &amp;lt;none&amp;gt;     ee6e804e0180     8 minutes ago     237.7 MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Getting started with Hugo</title>
      <link>https://fbrx.github.io/post/hugo-getting-started/</link>
      <pubDate>Fri, 02 Jan 2015 17:35:43 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/post/hugo-getting-started/</guid>
      <description>

&lt;p&gt;Hugo is a static CMS system. In this case static means, that all the content is rendered to static html markup. So there is no need for anything else than a HTTP server to run your site. This makes the whole thing a lot less complicated as well as a lot more secure.&lt;/p&gt;

&lt;p&gt;The content for a site which is generated by Hugo is generally edited in &lt;a href=&#34;http://daringfireball.net/projects/markdown/syntax&#34;&gt;markdown&lt;/a&gt; files. This gives you the possibility to edit everything disconnected as well as choose the tools you like for your writing&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you are running on a mac and are using &lt;a href=&#34;http://brew.sh/&#34;&gt;homebrew&lt;/a&gt; (which you probably should anyway) just &lt;code&gt;brew install hugo&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Create your first site&lt;/h2&gt;

&lt;p&gt;Hugo provides so called builders. Builders can be used to generate specific items like pages, blog posts and whole sites.&lt;/p&gt;

&lt;p&gt;The site builder is invoked as follows: &lt;code&gt;hugo new site /path/to/your/site&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yes&amp;hellip;thats it. Hugo just created a minimal site structure with all files and folders needed.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Install themes&lt;/h2&gt;

&lt;p&gt;Hugo provides a set of themes which are all hosted on github. To use a theme, it has to be copied to the local site structure under the themes folder.&lt;/p&gt;

&lt;p&gt;To install all available themes go to your working directory and clone the corresponding git repository: &lt;code&gt;git clone --recursive https://github.com/spf13/hugoThemes themes&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;Run your site locally&lt;/h2&gt;

&lt;p&gt;Just run &lt;code&gt;hugo server -D -w -t hyde&lt;/code&gt; from your working directory.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;-D&lt;/code&gt;switch tells Hugo to generate and display pages, which are marked as drafts.&lt;/li&gt;
&lt;li&gt;With &lt;code&gt;-w&lt;/code&gt; Hugo will be monitoring the working directory for any changes and publish them immediately.&lt;/li&gt;
&lt;li&gt;To select the theme which should be used to generate the site the &lt;code&gt;-t &amp;lt;theme name&amp;gt;&lt;/code&gt; option is used.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>The first post of this site</title>
      <link>https://fbrx.github.io/post/first/</link>
      <pubDate>Fri, 02 Jan 2015 16:23:40 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/post/first/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;f1r5t!!!!111!1!elf!111!&lt;/h2&gt;

&lt;p&gt;Lets get this party started!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://fbrx.github.io/page/about/</link>
      <pubDate>Thu, 01 Jan 2015 16:21:51 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/page/about/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;&amp;hellip;this site&lt;/h2&gt;

&lt;p&gt;This is my personal site where I keep all kinds of stuff related to IT, photography and any other thoughts.&lt;/p&gt;

&lt;p&gt;This site has been created with &lt;a href=&#34;http://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; - a static website engine - and &lt;a href=&#34;https://atom.io/&#34;&gt;atom&lt;/a&gt; - a highly customisable editor. The look &amp;amp; feel is based on the &lt;a href=&#34;https://github.com/SenjinDarashiva/hugo-uno&#34;&gt;hugo-uno&lt;/a&gt; theme.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;&amp;hellip;me&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;m an software architect / engineer based out of Stuttgart, Germany. I focus mainly on everything java and enterprise.&lt;/p&gt;

&lt;p&gt;Besides my usual interest in design and performance, currently I&amp;rsquo;m deeply interested in anything related to improving the overall development performance - especially in larger teams. This spans from the usual suspects like continuous integration and delivery to thigs like container virtualization and model driven software development.&lt;/p&gt;

&lt;p&gt;Currently I&amp;rsquo;m employed by &lt;a href=&#34;http://www.ww-informatik.de/&#34;&gt;W&amp;amp;W Informatik GmbH&lt;/a&gt;, the only IT supplier for the &lt;a href=&#34;http://www.ww-ag.de&#34;&gt;W&amp;amp;W AG&lt;/a&gt;. The thoughts and opinions expressed on this site are solely my own and have no relationship to my employer.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>language-xtext</title>
      <link>https://fbrx.github.io/project/language-xtext/</link>
      <pubDate>Fri, 05 Dec 2014 23:19:01 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/project/language-xtext/</guid>
      <description>

&lt;h2 id=&#34;toc_0&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;This repository contains a package which adds syntax highlighting for  &lt;a href=&#34;http://www.eclipse.org/Xtext/&#34;&gt;Xtext&lt;/a&gt; to your favorite editor (which is &lt;a href=&#34;https://atom.io/&#34;&gt;atom&lt;/a&gt; btw).&lt;/p&gt;

&lt;p&gt;From the Xtext homepage:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Xtext is a framework for development of programming languages and domain specific languages.&lt;/p&gt;

&lt;p&gt;It covers all aspects of a complete language infrastructure, from parsers, over linker, compiler or interpreter to fully-blown top-notch Eclipse IDE integration. It comes with great defaults for all these aspects which at the same time can be easily tailored to your individual needs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Current State&lt;/h2&gt;

&lt;p&gt;The current state of the project is pretty much wip - with the only problem being, that I don&amp;rsquo;t have much time to put any more effort into this.&lt;/p&gt;

&lt;p&gt;So if there are any contributions I would be happy to include them.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Since this package has not yet been published to atom.io you have to install it manually. For this you can just clone the repository into your &lt;code&gt;~/.atom/packages&lt;/code&gt; directory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.atom/packages
git clone https://github.com/fBrx/language-xtext.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Restart atom and enjoy the magic.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>propertySL</title>
      <link>https://fbrx.github.io/project/propertySL/</link>
      <pubDate>Sun, 22 Dec 2013 16:49:59 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/project/propertySL/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fBrx/propertySL&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/fBrx/propertySL.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The defined domain specific language - named &lt;em&gt;PropertySL&lt;/em&gt; - let&amp;rsquo;s you define properties and resource bundles in a concise way. It has support for namespaces, nesting and internationalization. The syntax is pretty straight forward to read and lets you define everything you need in one file.&lt;/p&gt;

&lt;p&gt;The project started initially as a sample project for exploring domain specific languages and the &lt;a href=&#34;http://www.eclipse.org/Xtext/&#34;&gt;Eclipse Xtext&lt;/a&gt; technology.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Example&lt;/h2&gt;

&lt;p&gt;The follwing is a basic definition of a &lt;em&gt;.psl&lt;/em&gt; file witch defines some properties.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
* This is a demo package
*/
package com.github.fbrx.propertysl.demo {

    SUPPORTED_LOCALES = {
        default en, de
    }

    /** This is a simple property */
    version = &amp;quot;1.0&amp;quot;

    /** This is a complex property with NLS support */
    greeting = {
        en : &amp;quot;Welcome to the world of PropertySL!&amp;quot;
        de : &amp;quot;Willkommen in der Welt von PropertySL!&amp;quot;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample above will result in the file &lt;em&gt;com.github.fbrx.propertysl.demo.properties&lt;/em&gt; being generated with the following content:
in the following files being generated:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;com.github.fbrx.propertysl.demo.properties&lt;/em&gt; (all properties for the &lt;em&gt;default locale&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;com.github.fbrx.propertysl.demo_en.properties&lt;/em&gt; (all properties for the locale &lt;em&gt;en&lt;/em&gt; - same as default)&lt;/li&gt;
&lt;li&gt;&lt;em&gt;com.github.fbrx.propertysl.demo_de.properties&lt;/em&gt; (all properties for the locale &lt;em&gt;de&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The file &lt;em&gt;com.github.fbrx.propertysl.demo.properties&lt;/em&gt; will contain the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;####
##  package : com.github.fbrx.propertysl.demo
##  locale  : en (default)
##
##  generated by propertySL (https://github.com/fBrx/propertySL) on 2013-12-31 @ 11:24:27
####

####
#   This is a demo package
####

com.github.fbrx.propertysl.demo.version = 1.0
com.github.fbrx.propertysl.demo.greeting = Welcome to the world of PropertySL!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Syntax&lt;/h2&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;Packages&lt;/h3&gt;

&lt;p&gt;With PropertySL properties are organized within packages. A package can contain zero or more properties of any kind. Packages can also contain other package (zero or more).&lt;/p&gt;

&lt;p&gt;For each defined package (at least) one property file will be generated. If a package contains no properties, no files will be generated for this package.&lt;/p&gt;

&lt;p&gt;When the resulting property files are generated the package names will be used:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;to generate the resulting filename&lt;/li&gt;
&lt;li&gt;to namespace the containing properties&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When packages are nested, the package name of the inner package will be generated as &lt;em&gt;packageNameOfParentPackage.packageNameOfNestedPackage&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java¬≥&#34;&gt;package com.github.fbrx.propertysl.demo {
    version = &amp;quot;1.0&amp;quot;
    package subpackage{
        version = &amp;quot;1.2&amp;quot;
    }

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above sample code will generate the following property files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;com.github.fbrx.propertysl.demo.properties&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;com.github.fbrx.propertysl.demo.subpackage.properties&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Packages can also have additional settings configured (e.g. &lt;em&gt;SUPPORTED_LOCALES&lt;/em&gt;).&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;NLS Support (Ressource Bundles)&lt;/h3&gt;

&lt;p&gt;PropertySL has the ability to maintain properties for multiple languages (locales) in one place. This is to support the standard Java Resource Bundle layout for property files.&lt;/p&gt;

&lt;p&gt;To use the NLS-support, the locales which are to be supported by the package have to be provided as the first statement within the package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.github.fbrx.propertysl.demo {
    SUPPORTED_LOCALES = {
        de, default en, en_US
    }
    //...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Locales can be defined by either language code only (i.e. &lt;code&gt;en&lt;/code&gt;) or language and country code to be more specific (i.e. &lt;code&gt;en_US&lt;/code&gt;). Multiple values are separated by comma.&lt;/p&gt;

&lt;p&gt;One of the defined locales can optionally be defined as the default locale. This results in a default ressource bundle file being generated. This file contains all the values which are defined for the respective locale. It is advised to always set the default locale.&lt;/p&gt;

&lt;p&gt;The definition above would result in the following files being generated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/src-gen
|- com.github.fbrx.propertysl.demo.properties       # the default locale (same contents as *_en.properties)
|- com.github.fbrx.propertysl.demo_de.properties    # only properties which have a value for &#39;de&#39; set
|- com.github.fbrx.propertysl.demo_en_US.properties # only properties which have a value for &#39;en&#39; set
|- com.github.fbrx.propertysl.demo_en_GB.properties # only properties which have a value for &#39;en_US&#39; set
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;Properties&lt;/h3&gt;

&lt;h4 id=&#34;toc_6&#34;&gt;Simple Properties&lt;/h4&gt;

&lt;p&gt;To define a simple property the following syntax can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** property comment */
key = &amp;quot;value&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above sample will be generated to the following entry in the resulting property file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#   property comment
key = value
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the package supports multiple locales, the value of the simple property will only be set for the default locale.&lt;/p&gt;

&lt;h4 id=&#34;toc_7&#34;&gt;Complex Properties (Multi-Language Properties)&lt;/h4&gt;

&lt;p&gt;To define a complex property which supports multiple languages the follwing syntax can be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/** property comment */
key = {
    locale : &amp;quot;value&amp;quot;
    locale : &amp;quot;value&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For complex properties an entry with the according value will be generated in each supported locale specific property file.
The following rules and restrictions apply:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If additional values for unsupported locales are defined, they will be silently ignored.&lt;/li&gt;
&lt;li&gt;If definitions for a supported locale is missing, no entry will be generated in the according locale specific property file&lt;/li&gt;
&lt;li&gt;If no value is set for the default locale, an error will be generated.&lt;/li&gt;
&lt;li&gt;To use complex properties, the &lt;em&gt;SUPPORTED_LOCALES&lt;/em&gt; have to be set for the containing package&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;toc_8&#34;&gt;Comments&lt;/h3&gt;

&lt;p&gt;To give a summary of packages contents as well as detailed explanations for single properties PropertySL supports a comprehensive comment facility.&lt;/p&gt;

&lt;p&gt;To associate a comment with a package or property just place it in front of the according element:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;/**
* Comments can describe package contents and give an overview
* of the purpose of the contained proeprties.
*
* Comments can span as many lines as needed.
*/
package com.github.fbrx.propertysl.demo {

    /** Properties can have comments too!  */
    greeting = &amp;quot;Howdy, partner!&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above comments will be rendered to the resulting property files (&lt;em&gt;com.github.fbrx.propertysl.demo.properties&lt;/em&gt; in the example) in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-properties&#34;&gt;####
#   Comments can describe package contents and give an overview
#   of the purpose of the contained proeprties.
#
#   Comments can span as many lines as needed.
####

#   Properties can have comments too!
com.github.fbrx.propertysl.demo.greeting = Howdy, partner!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Comments can also be placed at any other place in the &lt;em&gt;.psl&lt;/em&gt; file where they will be silently ignored.&lt;/p&gt;

&lt;h2 id=&#34;toc_9&#34;&gt;Editor support&lt;/h2&gt;

&lt;p&gt;The PropertySL was defined by means of the &lt;a href=&#34;http://www.eclipse.org/Xtext/&#34;&gt;Eclipse Xtext&lt;/a&gt; and &lt;a href=&#34;http://www.eclipse.org/Xtend/&#34;&gt;Eclipse Xtend&lt;/a&gt; technologies. Thus there is also first class (Eclipse based) editor support built-in.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.github.com/fBrx/propertySL/master/editor.png&#34; alt=&#34;PropertySL Editor&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;The editor supports the following features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Syntax highlighting for keywords&lt;/li&gt;
&lt;li&gt;Autocompletion for language constructs&lt;/li&gt;
&lt;li&gt;Validation of syntax and semantics&lt;/li&gt;
&lt;li&gt;Comprehensive Outline&lt;/li&gt;
&lt;li&gt;Quick Fixes for common errors and warnings&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;toc_10&#34;&gt;Attributions&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Icons for the Eclipse Outline were taken from the &lt;a href=&#34;http://ikons.piotrkwiatkowski.co.uk/&#34; title=&#34;IKONS&#34;&gt;IKONS&lt;/a&gt; package by &lt;a href=&#34;http://www.piotrkwiatkowski.co.uk/&#34;&gt;Piotr Kwiatkowski&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>samples</title>
      <link>https://fbrx.github.io/project/samples/</link>
      <pubDate>Sat, 24 Aug 2013 22:24:13 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/project/samples/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/fBrx/samples&#34;&gt;&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/fBrx/samples.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;overview&lt;/h2&gt;

&lt;p&gt;This &lt;a href=&#34;https://github.com/fBrx/samples&#34;&gt;repository&lt;/a&gt; contains small sample projects which each demonstrate the usage of certain technologies.&lt;/p&gt;

&lt;p&gt;These sample projects are here for educational purposes (of myself) only and act as an extension of my brain. Thus they are not actively maintained once they are done.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;projects&lt;/h2&gt;

&lt;p&gt;the following projects are currently existing:&lt;/p&gt;

&lt;h3 id=&#34;toc_2&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/jaxrs-plain&#34;&gt;jaxrs-plain&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;demonstrating the usage of the jax-rs ri (jersey) to create a sample REST service&lt;/p&gt;

&lt;h3 id=&#34;toc_3&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/jaxrs-spring&#34;&gt;jaxrs-spring&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;demonstrating the usage of the jax-rs ri (jersey) in combination with a spring enabled web application&lt;/p&gt;

&lt;h3 id=&#34;toc_4&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/jaxws-provider&#34;&gt;jaxws-provider&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;demonstrating the usage of the jax-ws library in conjunction with spring. integrates spring security and implements custom jax-ws handlers&lt;/p&gt;

&lt;h3 id=&#34;toc_5&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/juel-sample&#34;&gt;juel-sample&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;demonstrating the usage of the java unified expression language in plain java contexts&lt;/p&gt;

&lt;h3 id=&#34;toc_6&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/jvm-maintenance&#34;&gt;jvm-maintenance&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;sample web application displaying information about the current runtime and request&lt;/p&gt;

&lt;h3 id=&#34;toc_7&#34;&gt;&lt;a href=&#34;https://github.com/fBrx/samples/tree/master/xslt-sample&#34;&gt;xslt-sample&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;demonstrating the usage of xslt&lt;/p&gt;

&lt;h2 id=&#34;toc_8&#34;&gt;support&lt;/h2&gt;

&lt;p&gt;if you have any issues feel free to contact me or &lt;a href=&#34;https://github.com/fBrx/samples/issues&#34;&gt;create an issue&lt;/a&gt;. alternatively you are always welcome to fix it yourself and send me a pull request ;)&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>