<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
      <title>Docker on // Florian Br√ºssel / fBrx </title>
      <generator uri="https://hugo.spf13.com">Hugo</generator>
    <link>https://fbrx.github.io/tags/docker/index.xml/</link>
    <language>en-us</language>
    
    
    <updated>Thu, 21 Jan 2016 00:20:45 &#43;0100</updated>
    
    <item>
      <title>Fixing Tomcat startup performance on cloud servers</title>
      <link>https://fbrx.github.io/post/fixing-tomcat-startup-performance-on-cloud-servers/</link>
      <pubDate>Thu, 21 Jan 2016 00:20:45 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/post/fixing-tomcat-startup-performance-on-cloud-servers/</guid>
      <description>

&lt;p&gt;Apache Tomcat is well known to be a lightweight and &lt;em&gt;fast&lt;/em&gt; web container. This makes it a perfect fit for running your Java based web applications. Doing just that and playing around with &lt;a href=&#34;https://www.tutum.co/&#34;&gt;Docker Tutum&lt;/a&gt; and &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;Digitalocean&lt;/a&gt; I discovered that starting up a Docker Container, which would take &amp;lt;25s locally took over 2 minutes when being deployed on a Digitalocean server.&lt;/p&gt;

&lt;p&gt;Digging through the logs, the following line cought my attention:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO: Creation of SecureRandom instance for session ID generation using [SHA1PRNG] took [199,620] milliseconds.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Searching the web I found the solution on the allmighty &lt;a href=&#34;https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source&#34;&gt;StackOverflow&lt;/a&gt; and the &lt;a href=&#34;https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source&#34;&gt;Tomcat Wiki&lt;/a&gt;. The explanation given there is as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Tomcat 7+ heavily relies on SecureRandom class to provide random values for its session ids and in other places. Depending on your JRE it can cause delays during startup if entropy source that is used to initialize SecureRandom is short of entropy.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This makes perfectly sense as the servers, which are provided by Digitalocean (and probably all other cloud providers) would all be virtualized and spun up from the same templates. The lack of any external peripherals which produce unpredictable inputs (like keyboard, mouse, soundchips, etc) may lead to a low source of entropy. Using a blocking entropy source will guarantee a sufficient level of entropy but - as the name suggests - will block in case of low entropy until a sufficient level is reached.&lt;/p&gt;

&lt;p&gt;The default (blocking) entropy source used by Java under Linux is &lt;code&gt;/dev/random&lt;/code&gt;. This can be swapped out for the non-blocking version &lt;code&gt;/dev/urandom&lt;/code&gt; by setting the Java system property &lt;code&gt;java.security.egd&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-Djava.security.egd=file:/dev/./urandom
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For Tomcat the right place to put this setting would be the CATALINA_OPTS property in the file &lt;em&gt;apache-tomcat/bin/setenv.sh&lt;/em&gt;. If not already existing, you can create an appropriate file with the folowing command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;CATALINA_OPTS=-Djava.security.egd=file:/dev/./urandom&amp;quot; &amp;gt; apache-tomcat/bin/setenv.sh &amp;amp;&amp;amp; \
chmod a+x apache-tomcat/bin/setenv.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For all you Docker geeks out there I provided a Docker base image, which has the setting preconfigured under &lt;a href=&#34;https://hub.docker.com/r/fbrx/tomcat/&#34;&gt;fbrx/tomcat&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;toc_0&#34;&gt;/dev/random vs /dev/urandom&lt;/h2&gt;

&lt;p&gt;In Tomcat the SecureRandom instance is used for session id generation. If you are running in a highly sensitive environment this might be of concern to you. Otherwise this is probably no problem. Anyways always use good judement and think about the consequences.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;man 4 random&lt;/code&gt; provides further detail on he difference:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;/dev/random should be suitable for uses that need very high quality randomness such as one-time pad or key generation. When the entropy pool is empty, reads from /dev/random will block until additional environmental noise is gathered.&lt;/p&gt;

&lt;p&gt;A read from the /dev/urandom device will not block waiting for more entropy. As a result, if there is not sufficient entropy in the entropy pool, the returned values are theoretically vulnerable to a cryptographic attack on the algorithms used by the driver. Knowledge of how to do this is not available in the current unclassified literature, but it is theoretically possible that such an attack may exist. If this is a concern in your application, use /dev/random instead.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;Sources and further reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/28201794/slow-startup-on-tomcat-7-0-57-because-of-securerandom&#34;&gt;http://stackoverflow.com/questions/28201794/slow-startup-on-tomcat-7-0-57-because-of-securerandom&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hub.docker.com/r/fbrx/tomcat/&#34;&gt;https://hub.docker.com/r/fbrx/tomcat/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://security.stackexchange.com/questions/89/feeding-dev-random-entropy-pool&#34;&gt;http://security.stackexchange.com/questions/89/feeding-dev-random-entropy-pool&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source&#34;&gt;https://wiki.apache.org/tomcat/HowTo/FasterStartUp#Entropy_Source&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux.die.net/man/4/random&#34;&gt;http://linux.die.net/man/4/random&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Building your first Docker image</title>
      <link>https://fbrx.github.io/post/build-your-first-docker-image/</link>
      <pubDate>Wed, 20 Jan 2016 19:09:27 &#43;0100</pubDate>
      
      <guid>https://fbrx.github.io/post/build-your-first-docker-image/</guid>
      <description>

&lt;p&gt;Docker images are the way to distribute preconfigured, rebuildable containers.&lt;/p&gt;

&lt;p&gt;This can for example be used to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;persist the runtime configuration for a project in the SCM system of your choice and&lt;/li&gt;
&lt;li&gt;exchange configurations between team members&lt;/li&gt;
&lt;li&gt;get new team members up and running in minutes instead of days&lt;/li&gt;
&lt;li&gt;aleviate the burden of keeping a running dev environment up to date as long as the software is in production - even if the backlog is empty&lt;/li&gt;
&lt;li&gt;&amp;hellip;and many more&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To create a docker image you basically have two options:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;start a container, customize the environment to your liking and finally package the container as a reusable image&lt;/li&gt;
&lt;li&gt;build an image by means of a Dockerfile&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you plan on reusing and distributing your image it is always recommended to use a Dockerfile to describe the resulting environment. If an image is just packaged from an existing container, there is no easy way for the future user to know what functionality is provided by the image.&lt;/p&gt;

&lt;h1 id=&#34;toc_0&#34;&gt;Creating a Dockerfile&lt;/h1&gt;

&lt;p&gt;The Dockerfile is the Docker-way of specifiing the characteristics of an image, which can then be used to create a running container. You can think of the Dockerfile as a recipe to automatically build your image.&lt;/p&gt;

&lt;p&gt;The Dockerfile is made up of different commands. There is a comprehensive &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt; provided.&lt;/p&gt;

&lt;h2 id=&#34;toc_1&#34;&gt;The base image&lt;/h2&gt;

&lt;p&gt;The base image specifies the starting point of your container description. Usually you will not start with an empty container, but extend or customize an existing container (e.g. ubuntu or tomcat). You specifiy the base image with the &lt;code&gt;FROM &amp;lt;image&amp;gt;[:&amp;lt;tag&amp;gt;]&lt;/code&gt; directive. The definition of the base image must be the first non-comment instruction in the Dockerfile.&lt;/p&gt;

&lt;h2 id=&#34;toc_2&#34;&gt;Commands&lt;/h2&gt;

&lt;p&gt;All of the available commands are documented extensively in the &lt;a href=&#34;https://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt; and will not be covered in detail here.&lt;/p&gt;

&lt;h2 id=&#34;toc_3&#34;&gt;ENTRYPOINT and CMD&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;ENTRYPOINT&lt;/code&gt; and &lt;code&gt;CMD&lt;/code&gt; directives can be used to create executable containers and specify the command (and arguments) to be run on startup.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;ENTRYPOINT&lt;/code&gt; defines the default command (optionally including arguments) which is executed when an image is run via the &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt; command.
The &lt;code&gt;CMD&lt;/code&gt; dirctive is used to specify default arguments to the executable defined in the entrypoint. If any command line arguments are supplied to the &lt;code&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt; command, they wil replace the values specified in the Dockerfile. This can thus be used to provide a sensible default configuration to easily create and run a container based on your image without loosing the flexibility of customizing the startup command parameters (and minimizing he need to create a seperate Dockerfile just to adjust the command parameters).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; There are different possibilities and combinations for using the two directives, but the scenario described above worked out the best for me.&lt;/p&gt;

&lt;h1 id=&#34;toc_4&#34;&gt;Creating the image&lt;/h1&gt;

&lt;p&gt;To create the image, you must buils it. This basically means that the instructions in the Dockerfile have to be executed, recorded and persisted in the resulting image with the name of your choice. The image gets build with the &lt;code&gt;docker build&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker build -t &amp;lt;namespace&amp;gt;/&amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt; &amp;lt;base dir&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will execute the Dockerfile and store the resulting image in the local repository. The option after the &lt;code&gt;-t&lt;/code&gt; flag specifies the desired name of your resulting image in the (local) repository. Even though this setting is optional, I would always recommend setting it, since otherwise you will not be able to easily reference your newly built image.
The image names consist of a namespace and a tag name. You can group different images under a namespace. If you use the &lt;a href=&#34;https://hub.docker.com&#34;&gt;Docker Hub&lt;/a&gt; your account name will be the namespace for your images.
The tag can be used to provide different versions of an image. If not specified the tag &amp;lsquo;latest&amp;rsquo; will be implied.&lt;/p&gt;

&lt;p&gt;You can check, that your image was built successfully and stored in the local repository by running the &lt;code&gt;docker images&lt;/code&gt; command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY     TAG        IMAGE ID         CREATED           VIRTUAL SIZE
fbrx/test      latest     756a1405cd9e     7 minutes ago     237.7 MB
&amp;lt;none&amp;gt;         &amp;lt;none&amp;gt;     ee6e804e0180     8 minutes ago     237.7 MB
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>